"use strict";var __awaiter=this&&this.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(i,r){function l(e){try{o(a.next(e))}catch(e){r(e)}}function s(e){try{o(a.throw(e))}catch(e){r(e)}}function o(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,s)}o((a=a.apply(e,n||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=void 0;const fs=require("fs"),utils_1=require("./utils"),yesno=require("yesno"),path=require("path"),defaultConfig="export default {\n    input: 'src/snowblade/index.html',\n\n    include: [\n        'src/snowblade/components/**/*.html'\n    ],\n\n    output: {\n        file: 'dist/index.html',\n        formatting: 'none'\n    }\n}",samples={index:'<!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <DocHead />\n      </head>\n      <body>\n        <div\n          x-data="app()"\n          x-init="init()"\n          class="h-screen w-screen grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3"\n        >\n          <MetricCard\n            ::title="Reservoir Level"\n            ::color="blue"\n            ::trend="down"\n            ::glyph="water"\n            ::value="316 FT"\n          ></MetricCard>\n    \n          <MetricCard\n            ::title="Current Output"\n            ::color="yellow"\n            ::trend="up"\n            ::glyph="bolt"\n            ::value="3400 MW"\n          ></MetricCard>\n    \n          <MetricCard\n            $$wrap="template"\n            x-for="m in metrics"\n            ::$title="m.name"\n            ::$color="m.alarm ? \'red\' : \'green\'"\n            ::$trend="m.trend === \'rise\' ? \'up\' : \'down\'"\n            ::$glyph="{turbine: \'fan\', flare_stack: \'fire\', pump: \'faucet\', steam: \'wind\', radiation: \'radiation\'}[m.type]"\n            ::$value="m.value"\n          ></MetricCard>\n        </div>\n      </body>\n      <AlpineSource />\n    </html>',components:{head:'<meta snowblade name="DocHead" />\n\n        <title>Dashboard</title>\n        <link\n          href="https://unpkg.com/tailwindcss@latest/dist/tailwind.min.css"\n          rel="stylesheet"\n        />\n        <link\n          rel="stylesheet"\n          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"\n        />\n        <script\n          src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@latest/dist/alpine.min.js"\n          defer\n        ><\/script>',alpineSource:'<meta snowblade name="AlpineSource" />\n\n        <script>\n          const metricsData = `[{"name":"Unit #1 Pri.","trend":"fall","alarm":false,"value":"4,283 RPM","type":"turbine"},{"name":"Unit #1 Sec.","trend":"fall","alarm":false,"value":"4,055 RPM","type":"turbine"},{"name":"Well #3 Relief","trend":"fall","alarm":false,"value":"572 ºC","type":"flare_stack"},{"name":"Toluene Burn-off #2","trend":"fall","alarm":false,"value":"636 ºC","type":"flare_stack"},{"name":"Toluene Burn-off #1","trend":"rise","alarm":false,"value":"623 ºC","type":"flare_stack"},{"name":"Unit #1 LPCI","trend":"fall","alarm":false,"value":"139,357 L/min","type":"pump"},{"name":"Condenser Coolant #1","trend":"rise","alarm":false,"value":"137,889 L/min","type":"pump"},{"name":"Condenser Coolant #2","trend":"fall","alarm":true,"value":"116,146 L/min","type":"pump"},{"name":"Unit #1 Pri. Circuit","trend":"rise","alarm":false,"value":"11 MPa","type":"steam"},{"name":"Unit #1 Sec. Circuit","trend":"rise","alarm":false,"value":"12 MPa","type":"steam"},{"name":"Unit #1 Upper Deck","trend":"rise","alarm":false,"value":"287 Bq","type":"radiation"},{"name":"Unit #1 Relief","trend":"fall","alarm":false,"value":"172 Bq","type":"radiation"},{"name":"Unit #1 Heat Exch.","trend":"fall","alarm":false,"value":"225 Bq","type":"radiation"},{"name":"North Env.","trend":"fall","alarm":false,"value":"361 Bq","type":"radiation"}]`;\n        \n          function app() {\n            return {\n              metrics: [],\n              init() {\n                this.metrics = JSON.parse(metricsData);\n              }\n            };\n          }\n        <\/script>',metricCard:'<meta\n        snowblade\n        name="MetricCard"\n        ::color="blue"\n        ::title\n        ::glyph\n        ::trend\n        ::value\n      />\n      \n      <div class="w-full p-6">\n        <div\n          class="bg-gradient-to-b from-{{ color }}-200 to-{{ color }}-100 border-b-4 border-{{ color }}-600 rounded-lg shadow-xl p-5"\n        >\n          <div class="flex flex-row items-center">\n            <div class="flex-shrink pr-4">\n            <div class="rounded-full h-16 w-16 flex items-center text-center bg-{{ color }}-600">\n            <i class="fa fa-{{ glyph }} fa-2x fa-inverse mx-auto"></i>\n          </div>\n            </div>\n            <div class="flex-1 text-right md:text-center">\n              <h5 class="font-bold uppercase text-gray-600">{{ title }}</h5>\n              <h3 class="font-bold text-3xl">\n                {{ value }}\n                <span class="text-{{ color }}-500"\n                  ><i class="fas fa-caret-{{ trend }}"></i\n                ></span>\n              </h3>\n            </div>\n          </div>\n        </div>\n      </div>'}};function verifyOverwrite(e,n){return __awaiter(this,void 0,void 0,(function*(){try{fs.realpathSync(e);return yield yesno({question:`A ${n} already exists in your project directory. Do you want to overwrite it?`})}catch(e){return!0}}))}function writeConfig(){return __awaiter(this,void 0,void 0,(function*(){const e=utils_1.absolutePath("snowblade.config.js");(yield verifyOverwrite(e,"Snowblade config file"))&&fs.writeFileSync(e,defaultConfig)}))}const basePath=utils_1.absolutePath(""),snowbladePath=[basePath,"src","snowblade"].join(path.sep),componentsPath=[snowbladePath,"components"].join(path.sep),distPath=[basePath,"dist"].join(path.sep);function makeDirectories(){fs.mkdirSync(componentsPath,{recursive:!0}),fs.mkdirSync(distPath,{recursive:!0})}function makeSampleComponents(){return __awaiter(this,void 0,void 0,(function*(){let e=yield yesno({question:"Do you want to start with some sample components?"});if(!e)return;let n="file named src/snowblade/",t=`${snowbladePath}${path.sep}index.html`;e=yield verifyOverwrite(t,n+"index.html"),e&&fs.writeFileSync(t,samples.index),n+="components/",t=`${componentsPath}${path.sep}dochead.html`,e=yield verifyOverwrite(t,n+"dochead.html"),e&&fs.writeFileSync(t,samples.components.head),t=`${componentsPath}${path.sep}alpinesource.html`,e=yield verifyOverwrite(t,n+"alpinesource.html"),e&&fs.writeFileSync(t,samples.components.alpineSource),t=`${componentsPath}${path.sep}metriccard.html`,e=yield verifyOverwrite(t,n+"metriccard.html"),e&&fs.writeFileSync(t,samples.components.metricCard)}))}function init(){return __awaiter(this,void 0,void 0,(function*(){yield writeConfig(),makeDirectories(),yield makeSampleComponents()}))}exports.init=init;